// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrainMaster.Infrastracture.Connections;

#nullable disable

namespace TrainMaster.Infrastracture.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250303143443_Primeira")]
    partial class Primeira
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrainMaster.Domain.Entity.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PessoalProfileId")
                        .HasColumnType("integer");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Uf")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("PessoalProfileId")
                        .IsUnique();

                    b.ToTable("AddressEntity");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.EducationLevelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndeedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Institution")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProfessionalProfileId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalProfileId")
                        .IsUnique();

                    b.ToTable("EducationLevelEntity");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.PessoalProfileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<int>("Marital")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PessoalProfileEntity");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.ProfessionalProfileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Certifications")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Skills")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ProfessionalProfileEntity");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserEntity");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.AddressEntity", b =>
                {
                    b.HasOne("TrainMaster.Domain.Entity.PessoalProfileEntity", "PessoalProfile")
                        .WithOne("Address")
                        .HasForeignKey("TrainMaster.Domain.Entity.AddressEntity", "PessoalProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PessoalProfile");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.EducationLevelEntity", b =>
                {
                    b.HasOne("TrainMaster.Domain.Entity.ProfessionalProfileEntity", "ProfessionalProfile")
                        .WithOne("EducationLevel")
                        .HasForeignKey("TrainMaster.Domain.Entity.EducationLevelEntity", "ProfessionalProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalProfile");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.PessoalProfileEntity", b =>
                {
                    b.HasOne("TrainMaster.Domain.Entity.UserEntity", "User")
                        .WithOne("PessoalProfile")
                        .HasForeignKey("TrainMaster.Domain.Entity.PessoalProfileEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.ProfessionalProfileEntity", b =>
                {
                    b.HasOne("TrainMaster.Domain.Entity.UserEntity", "User")
                        .WithOne("ProfessionalProfile")
                        .HasForeignKey("TrainMaster.Domain.Entity.ProfessionalProfileEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.PessoalProfileEntity", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.ProfessionalProfileEntity", b =>
                {
                    b.Navigation("EducationLevel");
                });

            modelBuilder.Entity("TrainMaster.Domain.Entity.UserEntity", b =>
                {
                    b.Navigation("PessoalProfile");

                    b.Navigation("ProfessionalProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
